@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@using Microsoft.AspNetCore.Mvc.Rendering
@{
    ViewData["Title"] = "Rename & Download Files";
    var unprocessedFiles = ViewBag.UnprocessedFiles as List<string> ?? new List<string>();
    var processedFiles = ViewBag.ProcessedFiles as List<string> ?? new List<string>();
    var subjects = ViewBag.SubjectsList as SelectList;
    var candidatesData = ViewBag.CandidatesData as List<CandidateDatalistItem> ?? new List<CandidateDatalistItem>(); // Expecting list of { Value = CandidateCode, Text }
    Func<string, string> GenerateFileId = (fileName) => $"file_{Guid.NewGuid()}"; // Unique ID generator
}

<h1>@ViewData["Title"]</h1>



@if (!unprocessedFiles.Any() && !processedFiles.Any())
{
    <div class="alert alert-info" role="alert">
        You have no files uploaded. Go to the <a asp-controller="Upload" asp-action="Index">Upload</a> page first.
    </div>
} else
{


    <div class="row">
        <!-- Renaming Section Column -->
        <div class="col-lg-8 mb-4">
            <h4>Rename Unprocessed File</h4>
            @if (!unprocessedFiles.Any())
            {
                <div id="noUnprocessedFilesMessage" class="alert alert-secondary" role="alert">
                    @* Added ID *@
                    No unprocessed files found.
                </div>
            } else
            {
                <form asp-action="RenameFile" method="post" id="renameForm">
                    @Html.AntiForgeryToken()

                    <div class="row">
                        <div class="col-lg-7 mb-4">
                            <h5>1. Select File to Process</h5>
                            <div class="list-group file-list-scrollable mb-3" style="max-height: 300px; overflow-y: auto; border: 1px solid #dee2e6; padding: 10px;" id="unprocessedList">
                                @foreach (var fileName in unprocessedFiles)
                                {
                                    var fileId = GenerateFileId(fileName);
                                    <div id="@fileId" class="list-group-item d-flex justify-content-between align-items-center">
                                        <div>
                                            <input class="form-check-input me-2" type="radio" name="selectedFile" value="@fileName" id="radio_@fileId" required>
                                            <label class="form-check-label" for="radio_@fileId">
                                                @* Removed stretched-link *@
                                                <i class="bi bi-file-earmark-arrow-up me-1"></i>@fileName
                                            </label>
                                        </div>
                                        <a asp-action="GetFileInline" asp-route-fileName="@fileName" target="_blank" class="btn btn-sm btn-outline-secondary view-btn" title="View @fileName"><i class="bi bi-eye"></i></a> @* View Button Added *@
                                    </div>
                                }
                            </div>
                            <!-- Message Area -->
                            <div id="messageArea" class="mb-3">
                                @* TempData messages handled by JS now, but kept for non-JS fallback *@
                                @if (TempData["RenameSuccess"] != null)
                                {
                                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                                        @TempData["RenameSuccess"]
                                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                    </div>
                                }
                                @if (TempData["RenameError"] != null)
                                {
                                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                        @TempData["RenameError"]
                                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="col-lg-5 mb-4">
                            <h5 class="mt-3">2. Enter Renaming Details</h5>
                            <div class="mb-3">
                                <label for="subjectCode" class="form-label">Subject</label>
                                <select id="subjectCode" name="subjectCode" class="form-select" asp-items="subjects" required>
                                    <option value="">-- Select Subject --</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="centreNumber" class="form-label">Centre Number</label>
                                <input type="text" id="centreNumber" name="centreNumber" class="form-control" value="100111" pattern="\d{6}" title="Centre number must be 6 digits" required />
                            </div>
                            <div class="mb-3">
                                <label for="candidateInput" class="form-label">Candidate Code (4 Digits)</label> @* Label updated *@
                                <input class="form-control" list="candidateOptions" id="candidateInput" name="candidateCode" placeholder="Type name or enter 4-digit code..." required pattern="\d{4}" title="Select a candidate or enter a 4-digit candidate code"> @* Name changed, pattern changed *@
                                <datalist id="candidateOptions">
                                    @* Value is now CandidateCode (4 digits) *@
                                    @foreach (var candidate in candidatesData)
                                    {
                                        <option value="@candidate.Value">@candidate.Text</option>
                                    }
                                </datalist>
                                <small class="form-text text-muted">Select from the list or enter the 4-digit candidate code.</small>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Document Type</label>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="docType" id="docTypeCS" value="CS" required>
                                    <label class="form-check-label" for="docTypeCS">Cover Sheet (CS)</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="docType" id="docTypeMS" value="MS">
                                    <label class="form-check-label" for="docTypeMS">Mark Scheme (MS)</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="docType" id="docTypeProject" value="Project">
                                    <label class="form-check-label" for="docTypeProject">Project File (-1)</label>
                                </div>
                            </div>
                            <hr />
                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-success"><i class="bi bi-pencil-square me-1"></i> Rename Selected File</button>
                            </div>
                        </div>
                    </div>
                </form>
            }
        </div>

        <!-- Processed Files Column -->
        <div class="col-lg-4">
            <h4>Manage Processed Files</h4>
            @if (!processedFiles.Any() && !unprocessedFiles.Any())
            {
                <div id="noFilesMessageProcessed" class="alert alert-info" role="alert">No files found in your folder.</div>
            } else if (!processedFiles.Any())
            {
                <div id="noProcessedFilesMessage" class="alert alert-secondary" role="alert">
                    No processed (renamed) files found.
                </div>
            }

            <div class="mb-3 @(processedFiles.Any() ? "" : "d-none")" id="processedActions">
                <a asp-action="DownloadAllFiles" class="btn btn-outline-primary"><i class="bi bi-download me-1"></i> Download All (.zip)</a>
                <div class="dropdown d-inline-block ms-2">
                    <button class="btn btn-outline-info dropdown-toggle" type="button" id="downloadSubjectDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="bi bi-filter-circle me-1"></i> Download by Subject
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="downloadSubjectDropdown">
                        @foreach (SelectListItem subjectItem in subjects)
                        {
                            <li><a class="dropdown-item" asp-action="DownloadFilesBySubject" asp-route-subjectCode="@subjectItem.Value">@subjectItem.Text</a></li>
                        }
                        @if (!subjects.Any())
                        {
                            <li><span class="dropdown-item disabled">No subjects available</span></li>
                        }
                    </ul>
                </div>
            </div>

            <ul class="list-group file-list-scrollable" style="max-height: 450px; overflow-y: auto; border: 1px solid #dee2e6; padding: 10px;" id="processedList">
                @* Initial population from ViewBag *@
                @foreach (var fileName in processedFiles)
                {
                    var fileId = GenerateFileId(fileName);
                    <li id="@fileId" class="list-group-item d-flex justify-content-between align-items-center">
                        <span><i class="bi bi-check-circle-fill text-success me-2"></i>@fileName</span>
                        <div>
                            <a asp-action="GetFileInline" asp-route-fileName="@fileName" target="_blank" class="btn btn-sm btn-outline-secondary me-1 view-btn" title="View @fileName"><i class="bi bi-eye"></i></a>
                            <a asp-action="DownloadFile" asp-route-fileName="@fileName" class="btn btn-sm btn-outline-primary me-1" title="Download @fileName"><i class="bi bi-download"></i></a>
                            <form asp-action="DeleteFile" method="post" class="d-inline delete-form" data-file-id="@fileId" data-file-name="@fileName">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="fileName" value="@fileName" />
                                <button type="submit" class="btn btn-sm btn-outline-danger delete-btn" title="Delete @fileName"><i class="bi bi-trash"></i></button>
                            </form>
                        </div>
                    </li>
                }
            </ul>
            @if (!processedFiles.Any() && unprocessedFiles.Any()) // Show message only if unprocessed files exist but no processed ones
            {
                <div id="noProcessedFilesMessage" class="alert alert-secondary mt-3" role="alert">
                    @* Added ID and margin *@
                    No processed (renamed) files found yet.
                </div>
            }

        </div>
    </div>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // Ensure DOM is fully loaded before attaching listeners
        document.addEventListener('DOMContentLoaded', function () {
            const renameForm = document.getElementById('renameForm');
            const unprocessedList = document.getElementById('unprocessedList');
            const processedList = document.getElementById('processedList');
            const messageArea = document.getElementById('messageArea');
            const noUnprocessedFilesMessage = document.getElementById('noUnprocessedFilesMessage');
            const noProcessedFilesMessage = document.getElementById('noProcessedFilesMessage');
            const processedActionsDiv = document.getElementById('processedActions');
            const antiforgeryToken = '@Xsrf.GetAndStoreTokens(Context).RequestToken';

            // --- Helper Functions ---
            function displayMessage(message, isSuccess, duration = 30000) { // Default 30s
                if (isSuccess && duration !== 30000) { // Override for success if needed
                    duration = 60000; // Set to 60 seconds for success
                }
                const alertClass = isSuccess ? 'alert-success' : 'alert-danger';
                const alertDiv = document.createElement('div');
                alertDiv.className = `alert ${alertClass} alert-dismissible fade show`;
                alertDiv.setAttribute('role', 'alert');
                alertDiv.innerHTML = `
                    ${escapeHtml(message)}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;
                messageArea.insertBefore(alertDiv, messageArea.firstChild);

                setTimeout(() => {
                    const bsAlert = bootstrap?.Alert?.getInstance(alertDiv);
                    if (bsAlert) { bsAlert.close(); } else { alertDiv.remove(); }
                }, duration); // Use specified duration
            }


            function escapeHtml(unsafe) {
                if (!unsafe) return '';
                return unsafe
                    .replace(/&/g, "&amp;") // Replace & first
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/"/g, "&quot;")
                    .replace(/'/g, "&#039;"); // Or &apos;
            }

           function generateFileId() {
                return `file_${new Date().getTime()}_${Math.random().toString(16).slice(2)}`;
           }

            function addFileToProcessedList(fileName) {
                const noMsg = document.getElementById('noProcessedFilesMessage');
                if (noMsg) { noMsg.remove(); }
                processedActionsDiv?.classList.remove('d-none');

                const fileId = generateFileId();
                const li = document.createElement('li');
                li.id = fileId;
                li.className = 'list-group-item d-flex justify-content-between align-items-center';
                li.innerHTML = `
                    <span><i class="bi bi-check-circle-fill text-success me-2"></i>${escapeHtml(fileName)}</span>
                    <div>
                        <a href="/Rename/GetFileInline?fileName=${encodeURIComponent(fileName)}" target="_blank" class="btn btn-sm btn-outline-secondary me-1 view-btn" title="View ${escapeHtml(fileName)}"><i class="bi bi-eye"></i></a>
                        <a href="/Rename/DownloadFile?fileName=${encodeURIComponent(fileName)}" class="btn btn-sm btn-outline-primary me-1" title="Download ${escapeHtml(fileName)}"><i class="bi bi-download"></i></a>
                        <form action="/Rename/DeleteFile" method="post" class="d-inline delete-form" data-file-id="${fileId}" data-file-name="${escapeHtml(fileName)}">
                             <input name="__RequestVerificationToken" type="hidden" value="${antiforgeryToken}">
                             <input type="hidden" name="fileName" value="${escapeHtml(fileName)}" />
                             <button type="submit" class="btn btn-sm btn-outline-danger delete-btn" title="Delete ${escapeHtml(fileName)}"><i class="bi bi-trash"></i></button>
                        </form>
                    </div>`;
                processedList.appendChild(li);
                li.querySelector('.delete-form').addEventListener('submit', handleDeleteSubmit);
            }

            function removeFileFromList(listElement, fileId) {
                const itemToRemove = listElement?.querySelector(`#${fileId}`); // Add null check for listElement
                if (itemToRemove) {
                    itemToRemove.remove();
                }
                // Check if lists are now empty and show appropriate message/hide actions
                if (unprocessedList && unprocessedList.children.length === 0 && !document.getElementById('noUnprocessedFilesMessage')) {
                     const div = document.createElement('div');
                     div.id = 'noUnprocessedFilesMessage'; // Give it ID
                     div.className = 'alert alert-secondary';
                     div.setAttribute('role', 'alert');
                     div.textContent = "No unprocessed files found.";
                     // Insert before the form if it exists, otherwise just append
                     if(renameForm) { renameForm.parentNode.insertBefore(div, renameForm); }
                     else if (unprocessedList.parentNode) { unprocessedList.parentNode.appendChild(div); } // Append if form removed
                     renameForm?.remove(); // Remove form if no files left to rename
                }
                 if (processedList && processedList.children.length === 0 && !document.getElementById('noProcessedFilesMessage')) {
                     const div = document.createElement('div');
                     div.id = 'noProcessedFilesMessage';
                     div.className = 'alert alert-secondary';
                     div.setAttribute('role', 'alert');
                     div.textContent = "No processed (renamed) files found.";
                     // Check if message already exists before inserting
                     if (!document.getElementById('noProcessedFilesMessage')) {
                        processedList.parentNode.insertBefore(div, processedList);
                     }
                     processedActionsDiv?.classList.add('d-none');
                }
            }

            // --- AJAX Rename ---
            renameForm?.addEventListener('submit', function(event) {
                event.preventDefault(); // Ensure this is called first
                console.log("AJAX rename submit intercepted"); // Debugging log

                const formData = new FormData(renameForm);
                const selectedFileRadio = renameForm.querySelector('input[name="selectedFile"]:checked');

                if (!selectedFileRadio) {
                    displayMessage('Please select a file to rename.', false);
                    return;
                }
                // Ensure selectedFile is on the FormData (it should be if radio is checked)
                if (!formData.has('selectedFile')) {
                     formData.append('selectedFile', selectedFileRadio.value);
                }

                const candidateInput = document.getElementById('candidateInput');
                if (!/^\d{4}$/.test(candidateInput.value)) {
                     displayMessage('Please enter a valid 4-digit candidate code.', false);
                     candidateInput.focus();
                     return;
                }

                // Disable button during processing?
                const submitButton = renameForm.querySelector('button[type="submit"]');
                if(submitButton) submitButton.disabled = true;


                fetch(renameForm.action, {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': antiforgeryToken,
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: formData
                })
                .then(response => {
                     if (!response.ok) {
                        return response.json().catch(() => ({ message: `HTTP error! Status: ${response.status}` })).then(errorData => {
                             throw new Error(errorData?.message || `HTTP error! Status: ${response.status}`);
                        });
                     }
                     return response.json();
                })
                .then(data => {
                    displayMessage(data.message, data.success, 60000); // Use 60s timeout for rename result
                    if (data.success && data.oldFileName && data.newFileName) {
                        const oldFileElement = unprocessedList.querySelector(`input[name="selectedFile"][value="${escapeHtml(data.oldFileName)}"]`)?.closest('.list-group-item');
                        if(oldFileElement) {
                            removeFileFromList(unprocessedList, oldFileElement.id);
                        }
                        addFileToProcessedList(data.newFileName);
                        renameForm.reset();
                    }
                })
                .catch(error => {
                    console.error('Error renaming file:', error);
                    displayMessage(error.message || 'An error occurred while renaming the file.', false);
                })
                .finally(() => {
                     // Re-enable button
                     if(submitButton) submitButton.disabled = false;
                });
            });


            // --- AJAX Delete ---
            function handleDeleteSubmit(event) {
                event.preventDefault();
                const form = event.target;
                const deleteButton = form.querySelector('button[type="submit"]');
                const fileName = form.dataset.fileName;
                const fileId = form.dataset.fileId;
                const listElement = form.closest('ul');

                if (!confirm(`Are you sure you want to delete this file: ${fileName}?`)) {
                    return;
                }

                // Disable button
                if(deleteButton) deleteButton.disabled = true;

                fetch(form.action, {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': antiforgeryToken,
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                     body: new FormData(form)
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().catch(() => ({ message: `HTTP error! Status: ${response.status}` })).then(errorData => {
                             throw new Error(errorData?.message || `HTTP error! Status: ${response.status}`);
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    displayMessage(data.message, data.success); // Default 30s timeout
                    if (data.success) {
                        removeFileFromList(listElement, fileId);
                    }
                })
                .catch(error => {
                    console.error('Error deleting file:', error);
                    displayMessage(error.message || 'An error occurred while deleting the file.', false);
                })
                .finally(() => {
                     // Re-enable button (important even on error)
                     if(deleteButton) deleteButton.disabled = false;
                });
            }

            // Attach delete handlers to existing forms on page load
            document.querySelectorAll('.delete-form').forEach(form => {
                form.addEventListener('submit', handleDeleteSubmit);
            });

        }); // End DOMContentLoaded
    </script>
}
